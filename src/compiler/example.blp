@use JVM;
@start Main;

import std::Output;
import lang::Number;

@external "Test.java":
    Obj Test;
@end;

@external "test.hpp":
    // Exports TestOne as a object from test.hpp called Test
    Obj TestOne => Test;
    defun doSomething(x: Integer) => Void;
@end;

@defun example(x: Integer) => String:
    return Number::asString(x);
@end;


Obj Bar{
    priv const register x: Integer = 8;

    pub con() => Bar;
    pub static defun foo(restrict x: Integer*) => String;
    pub async defun baz() => const Integer;
    pub constexpr defun f(const x: Integer) => Void;
};


defun Main() => Void {
    let test: Test => new Test(/* args */);
    test.doSomething(5);
    let testOne: TestOne = new TestOne();
    testOne.doSomethingElse(4);
    let out: Output => new Output(Output.CONSOLE);
    global.doSomething(6);
}
